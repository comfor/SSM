
#输出到控制台
#在mybatis.xml配置文件中可以设置打日志是用log4j还是log4j2

log4j.appender.console=org.apache.log4j.ConsoleAppender
#The Target value is System.out or System.err
log4j.appender.console.Target=System.out
#set the layout type of the apperder
log4j.appender.console.layout=org.apache.log4j.PatternLayout
#set the layout format pattern
#log4j.appender.console.layout.ConversionPattern=[%-5p][%d{yyyy-MM-dd HH:mm:ss}] %c %L %m%n
log4j.appender.console.layout.ConversionPattern=[%-5p] %m%n

#
#	#输出到指定文件中
#	log4j.appender.file=org.apache.log4j.FileAppender
#	#define the file path and name（on Windows）
#	log4j.appender.file.File=D://Log/logfile.txt
#	#define the file path and name（on Linux）
#	#log4j.appender.file.File=/opt/Log/logfile.txt
#	#set the layout type of the apperder
#	log4j.appender.file.layout=org.apache.log4j.PatternLayout
#	#set the layout format pattern
#	log4j.appender.file.layout.ConversionPattern=[%-5p][%d{yyyy-MM-dd HH:mm:ss}] %c %L %m%n
#	
#	
#	#输出到文件中，文件大小到达指定尺寸的时候产生一个新的文件
#	log4j.appender.rollfile=org.apache.log4j.RollingFileAppender
#	#define the file path and name(on Windows)
#	log4j.appender.rollfile.File=D://Log/logrollfile.txt
#	#define the file path and name(on Windows)
#	#log4j.appender.rollfile.File=/opt/Log/logrollfile.txt
#	#set the log's size
#	log4j.appender.rollfile.MaxFileSize=10KB
#	#set the layout type of the apperder
#	log4j.appender.rollfile.layout=org.apache.log4j.PatternLayout
#	#set the layout format pattern
#	log4j.appender.rollfile.layout.ConversionPattern=[%-5p][%d{yyyy-MM-dd HH:mm:ss}] %c %L %m%n

#	配置rootLogger，以便于代码加载来控制日志的输出。
#	语法：log4j.rootLogger=[level],appenderName
#	说明：level为日志等级：一般用的优先级从高到低为：FATAL,ERROR,WARN,INFO,DEBUG.（说明在下面有说的）
#		低级别的可以显示高级别，但高级别的不能显示低级别的，所以，级别越高显示的信息量就越少
#		注：所以在代码中输出一定要用日志输出，开发时可以低级别，用以开发调试所需，在真正生产时就可以提高级别来禁止一些没必要信息的输出。
#			当然如果一些信息一定要输出，可以直接还是用System.out.println()输出语句
#		appenderName为将日志信息具体输入到什么地方
#	配置log4j.logger.com.comfor.dao.IStudentDynamicProxyDao，则是配置日志具体输出哪部分的

##define a logger
#log4j.rootLogger=debug,console,file,rollfile   
log4j.rootLogger=info,console
#log4j.logger.com.comfor.service.S08SpringMybatis.dao.IStudent81Dao=debug,console

######################################## log4j配置说明  ############################################
#
#	level：是日志输出级别，共有5级(由高到低)：
#	OFF：    关闭日志，这是最高等级，为了关闭日志记录
#	FATAL：严重错误，指定非常严重的错误事件，这可能导致应用程序中止        
#	ERROR：错误，错误事件可能仍然允许应用程序继续运行        
#	WARN：  危害，指定具有潜在危害的情况         
#	INFO：  信息，指定能够突出在粗粒度级别的应用程序运行情况的信息的消息 
#	DEBUG：调试，指定细粒度信息事件是最有用的应用程序调试  
#	TRACE：追踪，指定细粒度比DEBUG更低的信息事件 
#	
#	Appender：为日志输出目的地，Log4j提供的appender有以下几种输出形式：
#	org.apache.log4j.ConsoleAppender（控制台），
#	org.apache.log4j.FileAppender（文件），
#	org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
#	org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
#	org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
#	
#	Layout：日志输出格式，Log4j提供的layout有以下几种：
#	org.apache.log4j.HTMLLayout（以HTML表格形式布局），
#	org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
#	org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
#	org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
#
#	打印参数: Log4J采用类似C语言中的printf函数的打印格式格式化日志信息，如下:
#	%m   输出代码中指定的消息
#	%p   输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL 
#	%r   输出自应用启动到输出该log信息耗费的毫秒数 
#	%c   输出所属的类目，通常就是所在类的全名 
#	%t   输出产生该日志事件的线程名 
#	%n   输出一个回车换行符，Windows平台为“/r/n”，Unix平台为“/n” 
#	%d   输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss , SSS}，输出类似：2002年10月18日  22 ： 10 ： 28 ， 921  
#	%l   输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 ) 
#		
######################################## log4j配置说明  ############################################









